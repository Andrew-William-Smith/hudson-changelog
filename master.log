* commit 64f48c9f7569ce3bd1e572434e09d0a3ba4cd31a
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Jun 2 00:27:52 2022 -0500
| 
|     [syntax] Remove separate terminal group types
|     
|     Removed the type field_access_terms and rolled its members into type
|     field_access in order to reduce the amount of typing required to access
|     these terminals.  Additionally, the ergonomics of ignoring the field
|     field_access_terms and the two separate terminal fields in field_access
|     are the same, so there's no real advantage to using the separate type.
| 
|  src/syntax/cst.ml    | 17 ++++++++++++++---
|  src/syntax/parser.ml | 22 +++++++++++-----------
|  2 files changed, 25 insertions(+), 14 deletions(-)
| 
* commit de9419b49104cb160132715d8977d0aa44cc6579
| Author: awsmith <aws@awsmith.us>
| Date:   Mon May 30 02:52:03 2022 -0500
| 
|     [syntax] Reimplement parsing of function calls, infix operators
|     
|     Reimplemented the parsing of function calls and infix operators with the
|     same behaviour as the previous parser, save for the aggressive delimiter
|     correction.  In general, I am starting to think that delimiter checking
|     should largely be restricted to when we actually see a delimiter.  This
|     opinion is largely inspired by an examination of rustc's error
|     correction, which is relatively conservative with regard to delimiters.
|     It seems like any more "clever" solution could potentially result in
|     malformed trees, while the fidelity of the syntax tree should generally
|     be the highest priority.
|     
|     The tests for these reimplemented constructs have not yet been
|     re-enabled, as the serialisation format and structure of the syntax tree
|     have both changed.  Furthermore, I still haven't implemented delimiter
|     correction for the above reasons.
| 
|  src/prelude/reporting.ml      |   9 +--
|  src/prelude/reporting_intf.ml |   7 +-
|  src/syntax/cst.ml             |  81 +++++++++++++++++++--
|  src/syntax/parser.ml          | 151 ++++++++++++++++++++++++++++++++++++++--
|  test/test_parser.ml           |   6 +-
|  5 files changed, 229 insertions(+), 25 deletions(-)
| 
* commit f002fa0d533f25318aef8f3c64982acc0ad3abe9
| Author: awsmith <aws@awsmith.us>
| Date:   Sun May 29 20:18:09 2022 -0500
| 
|     [syntax] Begin parser refactor: atoms, dot accesses
|     
|     Started a refactor of the parser since the old implementation had a
|     number of limitations that would present significant difficulties moving
|     forward, viz. the immediate reporting of errors and lack of higher-order
|     parsing primitives.  The new implementation aims to fix all of these
|     issues, in addition to being a general code cleanup now that I have a
|     much better idea of how I want to structure the parser as a whole.
|     
|     This commit also includes a small change to the behaviour of the parser:
|     the period of a dot access does not attempt to perform error correction
|     if it is preceded by a closing delimiter, as that correction could
|     introduce ambiguities in complex expressions.  Any token other than a
|     valid (or nearly valid) field will now return an error of type
|     `Dot_missing_field.
| 
|  src/prelude/reporting.ml                          |   2 +-
|  src/prelude/reporting_intf.ml                     |   2 +-
|  src/syntax/cst.ml                                 | 187 ++-----
|  src/syntax/parser.ml                              | 530 ++++++--------------
|  src/syntax/parser.mli                             |   8 -
|  test/parser_data/field_access_decimal.ptest       |   5 +
|  .../field_access_missing_accessor.ptest           |   4 +-
|  .../field_access_missing_accessor_2.ptest         |   8 +-
|  test/parser_data/field_access_mixed.ptest         |   4 +-
|  test/parser_data/field_access_tuple_double.ptest  |   8 +-
|  test/parser_data/field_access_tuple_single.ptest  |   2 +-
|  .../malformed_invalid_byte_string.ptest           |   2 +-
|  .../malformed_invalid_caret_character.ptest       |   2 +-
|  .../parser_data/malformed_invalid_codepoint.ptest |   2 +-
|  test/parser_data/malformed_invalid_digit.ptest    |   2 +-
|  test/parser_data/malformed_invalid_radix.ptest    |   2 +-
|  .../malformed_invalid_string_escape.ptest         |   2 +-
|  .../malformed_overlong_named_character.ptest      |   2 +-
|  .../malformed_unknown_character_name.ptest        |   2 +-
|  test/test_parser.ml                               |  30 +-
|  20 files changed, 237 insertions(+), 569 deletions(-)
| 
* commit b6653af3a485ce7383670848914e799bd03845a4
| Author: awsmith <aws@awsmith.us>
| Date:   Wed May 25 01:52:41 2022 -0500
| 
|     [test] Add additional parser tests; final newlines
|     
|     Added some additional parser tests to check edge cases and ensured that
|     all test files end with trailing newlines.  The shell command that I
|     used to perform this modification was:
|     
|     $ for f in $(ls test/parser_data); do sed -i -e '$a\' $f; done
| 
|  test/parser_data/atom_nop_parentheses.ptest            | 2 +-
|  test/parser_data/funcall_complex_head_2.ptest          | 2 +-
|  test/parser_data/funcall_flag_false.ptest              | 2 +-
|  test/parser_data/funcall_flag_true.ptest               | 2 +-
|  test/parser_data/funcall_label_precedence.ptest        | 2 +-
|  test/parser_data/funcall_label_single.ptest            | 2 +-
|  test/parser_data/funcall_mixed.ptest                   | 8 ++++++++
|  test/parser_data/funcall_positional_precedence.ptest   | 2 +-
|  test/parser_data/funcall_positional_single.ptest       | 2 +-
|  test/parser_data/funcall_punned.ptest                  | 2 +-
|  test/parser_data/infix_compare.ptest                   | 2 +-
|  test/parser_data/infix_compare_dominates_plus.ptest    | 2 +-
|  test/parser_data/infix_compare_equal.ptest             | 4 ++++
|  test/parser_data/infix_compare_pipe.ptest              | 4 ++++
|  test/parser_data/infix_compose.ptest                   | 2 +-
|  test/parser_data/infix_dollar.ptest                    | 2 +-
|  test/parser_data/infix_dollar_dominates_symbolic.ptest | 2 +-
|  test/parser_data/infix_exponent.ptest                  | 2 +-
|  test/parser_data/infix_index.ptest                     | 2 +-
|  test/parser_data/infix_plus.ptest                      | 2 +-
|  test/parser_data/infix_symbolic.ptest                  | 2 +-
|  test/parser_data/infix_times.ptest                     | 2 +-
|  test/parser_data/infix_times_dominates_exponent.ptest  | 2 +-
|  test/test_parser.ml                                    | 3 +++
|  24 files changed, 39 insertions(+), 20 deletions(-)
| 
* commit be65be99ef3b707bbb9fbce234dad53f58ad20eb
| Author: awsmith <aws@awsmith.us>
| Date:   Mon May 23 04:10:33 2022 -0500
| 
|     [syntax] Implemented function call parsing
|     
|     Implemented the parsing of function calls, including all of their
|     argument types with rudimentary error correction.  Hudson's function
|     call syntax is similar to other functional languages, not requiring any
|     delimiters between arguments: f x y.  As in OCaml, function calls bind
|     more tightly than all infix operators.
| 
|  src/prelude/reporting.ml                          |  1 +
|  src/prelude/reporting_intf.ml                     |  3 +-
|  src/syntax/cst.ml                                 | 62 +++++++++++++++++--
|  src/syntax/parser.ml                              | 66 ++++++++++++++++++++-
|  test/parser_data/funcall_complex_head.ptest       |  3 +
|  test/parser_data/funcall_complex_head_2.ptest     |  3 +
|  test/parser_data/funcall_flag_false.ptest         |  3 +
|  test/parser_data/funcall_flag_true.ptest          |  3 +
|  .../parser_data/funcall_label_missing_value.ptest |  5 ++
|  .../funcall_label_missing_value_2.ptest           |  7 +++
|  test/parser_data/funcall_label_multiple.ptest     |  4 ++
|  test/parser_data/funcall_label_precedence.ptest   |  3 +
|  test/parser_data/funcall_label_single.ptest       |  3 +
|  test/parser_data/funcall_positional_multi.ptest   |  5 ++
|  .../funcall_positional_precedence.ptest           |  3 +
|  .../funcall_positional_precedence_2.ptest         |  4 ++
|  test/parser_data/funcall_positional_single.ptest  |  3 +
|  test/parser_data/funcall_punned.ptest             |  3 +
|  test/parser_data/infix_dominates_funcall.ptest    |  4 ++
|  test/test_parser.ml                               | 27 +++++++++
|  20 files changed, 206 insertions(+), 9 deletions(-)
| 
* commit da572bfff2b12d498755704d75dd7a2d65d50d65
| Author: awsmith <aws@awsmith.us>
| Date:   Sat May 21 23:46:48 2022 -0500
| 
|     [syntax] Implemented infix operator precedence parsing
|     
|     Implemented the parsing of infix operators according to a defined
|     precedence table.  In preparation for the addition of function call
|     syntax, I also separated standard infix operators from field accesses:
|     the former bind less tightly than function calls, while the latter binds
|     more tightly.
| 
|  src/syntax/cst.ml                                 |  15 ++
|  src/syntax/lexer.ml                               |   9 +-
|  src/syntax/parser.ml                              | 190 ++++++++++++--------
|  src/syntax/token.ml                               |   4 +
|  test/parser_data/atom_nop_parentheses.ptest       |   3 +
|  test/parser_data/delimiter_extra_lparen_3.ptest   |   6 -
|  test/parser_data/field_access_complex_head.ptest  |   3 +
|  .../field_access_missing_accessor.ptest           |   5 +
|  .../field_access_missing_accessor_2.ptest         |   7 +
|  test/parser_data/infix_compare.ptest              |   3 +
|  .../infix_compare_dominates_plus.ptest            |   4 +
|  .../infix_compare_left_associative.ptest          |   4 +
|  test/parser_data/infix_compose.ptest              |   3 +
|  .../infix_compose_right_associative.ptest         |   4 +
|  test/parser_data/infix_dollar.ptest               |   3 +
|  .../infix_dollar_dominates_symbolic.ptest         |   4 +
|  .../infix_dollar_left_associative.ptest           |   4 +
|  test/parser_data/infix_exponent.ptest             |   3 +
|  .../infix_exponent_dominates_index.ptest          |   4 +
|  test/parser_data/infix_exponent_override.ptest    |   5 +
|  test/parser_data/infix_exponent_override_2.ptest  |   5 +
|  .../infix_exponent_right_associative.ptest        |   4 +
|  test/parser_data/infix_index.ptest                |   3 +
|  .../infix_index_left_associative.ptest            |   4 +
|  test/parser_data/infix_missing_rhs.ptest          |   5 +
|  test/parser_data/infix_missing_rhs_2.ptest        |   6 +
|  test/parser_data/infix_plus.ptest                 |   3 +
|  test/parser_data/infix_plus_dominates_times.ptest |   6 +
|  .../parser_data/infix_plus_left_associative.ptest |   4 +
|  test/parser_data/infix_symbolic.ptest             |   3 +
|  .../infix_symbolic_dominates_compare.ptest        |   4 +
|  .../infix_symbolic_left_associative.ptest         |   5 +
|  test/parser_data/infix_times.ptest                |   3 +
|  .../infix_times_dominates_exponent.ptest          |   4 +
|  .../infix_times_left_associative.ptest            |   5 +
|  test/test_lexer.ml                                |   5 +-
|  test/test_parser.ml                               |  51 +++++-
|  37 files changed, 311 insertions(+), 92 deletions(-)
| 
* commit 2c1a2f17deb5fa3c0744d2233e86c7026e226d09
| Author: awsmith <aws@awsmith.us>
| Date:   Sun May 15 23:43:41 2022 -0500
| 
|     [syntax] Added closing delimiter error handling in head position
|     
|     Added handling of closing delimiters in head-initial position: they are
|     always assumed to terminate their enclosing expressions in the immediate
|     context and can be handled by higher-level parsers later on in the
|     parsing process.
| 
|  src/syntax/parser.ml                            | 5 +++++
|  test/parser_data/delimiter_extra_lparen_3.ptest | 6 ++++++
|  test/test_parser.ml                             | 3 ++-
|  3 files changed, 13 insertions(+), 1 deletion(-)
| 
* commit c697176dd44a55b48523d10c50430f8e2cc5a97d
| Author: awsmith <aws@awsmith.us>
| Date:   Sun May 15 23:25:16 2022 -0500
| 
|     [syntax] Added delimiter error correction in infix position
|     
|     Added correction for delimiter errors preceding binary operators in
|     expressions, allowing test delimiter_extra_lparen to pass.  Delimiter
|     errors in head-initial position, as in "x.)y", are still uncorrected
|     since I have not yet determined how they should be handled.
| 
|  src/syntax/parser.ml                            | 155 +++++++++++++---------
|  test/parser_data/delimiter_extra_lparen_2.ptest |   9 ++
|  test/test_parser.ml                             |   3 +-
|  3 files changed, 106 insertions(+), 61 deletions(-)
| 
* commit 393741994bc10307d9e194844a3b3463f95a7ea4
| Author: awsmith <aws@awsmith.us>
| Date:   Sat May 7 08:13:24 2022 -0500
| 
|     [syntax] Implemented delimiter error correction in head position
|     
|     Implemented error correction for extra, missing, or mismatched
|     delimiters at the head positions of expressions.  With this commit, test
|     delimiter_extra_lparen is expected to fail, since it requires token
|     deletion in the position of an infix operator rather than an expression
|     head.
| 
|  src/prelude/reporting.ml                          |   7 +-
|  src/prelude/reporting_intf.ml                     |   3 +
|  src/syntax/cst.ml                                 |  10 +-
|  src/syntax/lexer.ml                               |   9 +-
|  src/syntax/parser.ml                              | 112 ++++++++++++++++++--
|  test/parser_data/delimiter_extra_lparen.ptest     |   7 ++
|  .../parser_data/delimiter_mismatched_lparen.ptest |   7 ++
|  test/parser_data/delimiter_unmatched_lparen.ptest |   5 +
|  .../delimiter_unmatched_lparen_2.ptest            |   7 ++
|  test/parser_data/field_access_tuple_double.ptest  |   1 +
|  test/test_parser.ml                               |  12 ++-
|  11 files changed, 167 insertions(+), 13 deletions(-)
| 
* commit b37230f27922359d0f7401da308b309399413f37
| Author: awsmith <aws@awsmith.us>
| Date:   Thu May 5 16:21:48 2022 -0500
| 
|     [syntax] Encapsulate common parser state
|     
|     Encapsulated the common parser state, the current stack of pending
|     closing delimiters and the list of tokens that are yet to be parsed,
|     into a record to simplify the process of passing it around.  I also
|     implemented the most barebones form of parenthesis parsing possible: the
|     next pending task in this regard is error correction, which will further
|     benefit from the state encapsulation.
| 
|  src/syntax/parser.ml                             | 114 +++++++++++++--------
|  test/parser_data/field_access_tuple_double.ptest |   5 +
|  test/test_parser.ml                              |   1 +
|  3 files changed, 75 insertions(+), 45 deletions(-)
| 
* commit c40abc3343108210925d63e53ad3af63e6859075
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 29 11:52:18 2022 -0500
| 
|     [meta] Add ppx_blob dependency to build script; indentation
| 
|  .builds/archlinux.yml                     |  1 +
|  test/parser_data/field_access_mixed.ptest | 12 ++++++------
|  2 files changed, 7 insertions(+), 6 deletions(-)
| 
* commit 9feedb84469ea1ee4b7250db5de326e59e12767d
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 29 11:37:35 2022 -0500
| 
|     [test] Use s-expression validation in parser tests
|     
|     The difficulty of writing complex nested structures in OCaml has been
|     discouraging me from writing particularly complex parser tests.  As more
|     complex structures and programs will have to be parsed in the near
|     future, I have migrated the parser testing infrastructure to compare the
|     sexp form of parsed expressions to an expected form loaded from a
|     string.  Provided that the serialised sexps continue to preserve the CST
|     structure with a reasonable degree of fidelity (as is currently the
|     plan), this new test format should encourage me to write more detailed
|     tests and allow for tests to be reused between languages in the future.
| 
|  dune-project                                      |  1 +
|  test/dune                                         |  6 +-
|  test/parser_data/atom_byte_string_literal.ptest   |  3 +
|  test/parser_data/atom_character_literal.ptest     |  3 +
|  test/parser_data/atom_identifier.ptest            |  3 +
|  test/parser_data/atom_integer_literal.ptest       |  3 +
|  test/parser_data/atom_string_literal.ptest        |  3 +
|  test/parser_data/field_access_mixed.ptest         |  9 ++
|  test/parser_data/field_access_record_deep.ptest   | 15 ++++
|  test/parser_data/field_access_record_double.ptest |  4 +
|  test/parser_data/field_access_record_single.ptest |  3 +
|  test/parser_data/field_access_tuple_single.ptest  |  3 +
|  .../malformed_invalid_byte_string.ptest           |  5 ++
|  .../malformed_invalid_caret_character.ptest       |  5 ++
|  .../parser_data/malformed_invalid_codepoint.ptest |  5 ++
|  test/parser_data/malformed_invalid_digit.ptest    |  5 ++
|  test/parser_data/malformed_invalid_radix.ptest    |  5 ++
|  .../malformed_invalid_string_escape.ptest         |  5 ++
|  .../malformed_overlong_named_character.ptest      |  5 ++
|  .../malformed_unknown_character_name.ptest        |  5 ++
|  test/test_parser.ml                               | 91 ++++++++-------------
|  21 files changed, 128 insertions(+), 59 deletions(-)
| 
* commit 205a80869d8bd578219b074f9787a0b38b946307
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 29 09:29:43 2022 -0500
| 
|     [syntax] Implemented parsing of field and tuple accesses
|     
|     Implemented a parser for record field and tuple index accesses using dot
|     syntax (x.y).  I have also set up the infrastructure for a Pratt parser,
|     which I shall use to parse all other expression types.
|     
|     Known issue: consecutive tuple field accesses of the form x.0.1 lex to
|     the sequence [Identifier; Period; Decimal], meaning that they do not
|     register as field accesses.  Since the very concept of implicitly
|     unwrapping a nested tuple in this way feels somewhat improper, I
|     consider this restriction to be a feature rather than a bug.  If
|     absolutely necessary, such expressions may be explicitly parenthesised:
|     (x.0).1
| 
|  src/prelude/reporting.ml      |   3 +-
|  src/prelude/reporting_intf.ml |   3 +-
|  src/syntax/cst.ml             |  96 +++++++++++++------------
|  src/syntax/parser.ml          | 155 ++++++++++++++++++++++++++++------------
|  src/syntax/parser.mli         |   3 +-
|  src/syntax/token.ml           |  32 +++++----
|  test/test_parser.ml           |  81 +++++++++++----------
|  7 files changed, 230 insertions(+), 143 deletions(-)
| 
* commit 55d74768e3ba1674d6fe1a04af983ef34f55e366
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Apr 28 09:49:23 2022 -0500
| 
|     [prelude, syntax] Add modular structure to Cst, Sexp, Token
|     
|     Added an additional layer of modular structure to Cst and Token,
|     avoiding the excessive pollution of their global namespaces by to_sexp
|     and equal functions.  To aid in defining pretty-print functions,
|     Prelude.Sexp now provides a functor Enhance whose results are intended
|     to be included in modules that have to_sexp functions defined.
|     
|     Furthermore, I decided to keep ppx_deriving.eq as a dependency to avoid
|     writing an excessive amount of boilerplate for equality predicates.
| 
|  src/prelude/extensions.ml |  71 ++++++++---
|  src/syntax/cst.ml         |  75 +++++-------
|  src/syntax/dune           |   2 +-
|  src/syntax/lexer.ml       |  26 ++--
|  src/syntax/lexer.mli      |   4 +-
|  src/syntax/parser.ml      |  10 +-
|  src/syntax/parser.mli     |   2 +-
|  src/syntax/token.ml       | 293 +++++++++++++++++++++++---------------------
|  test/test_lexer.ml        |   7 +-
|  test/test_parser.ml       |  10 +-
|  10 files changed, 269 insertions(+), 231 deletions(-)
| 
* commit ee5e1f06ecff5b8dcf3570df4c5765050da2edf9
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 27 20:23:27 2022 -0500
| 
|     [syntax] Migrate ppx_deriving.show to s-expressions
|     
|     In an effort to remove ppx_deriving as a dependency since it is no
|     longer actively maintained and does not really allow AST nodes to be
|     formatted in a reasonable way, I am migrating all uses of it to
|     handwritten functions.  In this commit, I have migrated all uses of
|     ppx_deriving.show to use Containers' Sexp module, allowing for both
|     pretty-printing and the construction of s-expressions for other
|     purposes.
| 
|  src/prelude/extensions.ml |  14 ++++-
|  src/syntax/cst.ml         |  43 ++++++++++++---
|  src/syntax/lexer.ml       |   3 +-
|  src/syntax/token.ml       | 124 +++++++++++++++++++++++++++++++++++++++++---
|  test/test_lexer.ml        |   5 +-
|  5 files changed, 170 insertions(+), 19 deletions(-)
| 
* commit 683c0696588e0a59ca76bbfd81c47e8a138b6755
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 27 18:43:44 2022 -0500
| 
|     [syntax] Implement parsing of named expressions
|     
|     Implemented the parsing of named expressions, which consist of
|     identifiers and dot accesses (x.y.z).  Also reworked the reporting
|     infrastructure slightly to allow for errors from both the lexer and
|     parser to be reported, which further required me to normalise the Lexer
|     interface to always return Source_location.t rather than
|     Lexgen_intf.location.  Should these changes be split into multiple
|     commits?  Probably, but eh...
| 
|  src/prelude/reporting.ml      |  7 ++--
|  src/prelude/reporting.mli     |  6 ++--
|  src/prelude/reporting_intf.ml |  9 +++--
|  src/syntax/cst.ml             | 15 +++++----
|  src/syntax/lexer.ml           | 25 +++++++++-----
|  src/syntax/lexer.mli          |  5 ++-
|  src/syntax/parser.ml          | 73 ++++++++++++++++++++++++++++-------------
|  src/syntax/token.ml           |  4 +--
|  test/test_lexer.ml            |  7 ++--
|  test/test_parser.ml           | 49 +++++++++++++++++++--------
|  10 files changed, 131 insertions(+), 69 deletions(-)
| 
* commit a4eeca9b7e9d5105fe6374b94c85eda55b72ea35
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 27 13:48:10 2022 -0500
| 
|     [syntax] Add modules Syntax.Cst.{Lex,Syn}
|     
|     Added some child modules to the Cst module to allow for some additional
|     structure in the main CST nodes.  This encapsulation will become
|     increasingly necessary as more node types are defined, so it is
|     beneficial to add this structure now.  Furthermore, this additional
|     degree of separation between node types allows for the amount of mutual
|     recursion in the CST type definitions to be reduced substantially.
| 
|  src/prelude/prelude.ml |  1 +
|  src/syntax/cst.ml      | 54 +++++++++++++++++++++++++++++++++++++-----------
|  src/syntax/parser.ml   | 18 +++++++++-------
|  src/syntax/token.ml    |  4 ++--
|  test/test_parser.ml    |  5 ++---
|  5 files changed, 57 insertions(+), 25 deletions(-)
| 
* commit bdb3f2b8543706739ecb72f8e32bcc52beb7b60f
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Apr 26 23:52:31 2022 -0500
| 
|     [syntax] Restructure CST nodes
|     
|     Removed the common structure for CST nodes, since it will be more useful
|     to be able to differentiate between constituent tokens than to group
|     them together into one list.  This change may also remove a level of
|     indirection in pattern matching CST nodes, which will substantially
|     improve the ergonomics of other portions of the compiler.
| 
|  src/syntax/cst.ml    | 44 +++++++++++++++++++++++------------
|  src/syntax/parser.ml | 53 ++++++++++++++++++++++++------------------
|  src/syntax/token.ml  |  6 ++---
|  test/test_lexer.ml   |  7 +-----
|  test/test_parser.ml  | 63 +++++++++++++++++++++++++++++++++-----------------
|  5 files changed, 106 insertions(+), 67 deletions(-)
| 
* commit ecc8c43ab103b084dbf867e8a94e225247e44251
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Apr 26 18:11:09 2022 -0500
| 
|     [syntax] Start parser: implement parsing of literal atoms
|     
|     Now that the lexer is mostly finished save for potential future
|     syntactic modifications, we now shift our focus to Hudson's parser!
|     This commit introduces the parsing of literal atoms, along with
|     rudimentary error recovery for error tokens that encode types.  This
|     recovery scheme will allow for the types of these tokens to be inferred,
|     allowing for compilation to progress substantially past the lexer when
|     we can guess the user's intent.
|     
|     Furthermore, the basic structure of the parser is already apparent:
|     individual parser functions consume a token stream and return the CST
|     node that they parsed in addition to the unparsed remainder of the token
|     stream.  Since CST nodes will already contain every token parsed by the
|     lexer, we encode this stream as a list for simplicity.
| 
|  src/syntax/cst.ml     | 23 ++++++++++++++++++++++
|  src/syntax/lexer.ml   |  9 +++++++++
|  src/syntax/lexer.mli  |  8 +++++++-
|  src/syntax/parser.ml  | 44 ++++++++++++++++++++++++++++++++++++++++++
|  src/syntax/parser.mli |  7 +++++++
|  test/test.ml          |  4 +++-
|  test/test_parser.ml   | 51 +++++++++++++++++++++++++++++++++++++++++++++++++
|  7 files changed, 144 insertions(+), 2 deletions(-)
| 
* commit b0563cced2c5998783a94d16ef356d524cb95f9c
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 25 11:57:55 2022 -0500
| 
|     [aux/vim, src] Various syntax (highlighting) changes
|     
|     I restructured the Vim syntax definition slightly in order to improve
|     the highlighting of comments and added error highlighting for
|     context-dependent keywords used outside of their proper contexts.  This
|     modification will also allow spurious "end"s to be highlighted, which I
|     predict will be the primary source of contextual keyword errors.
|     
|     I also added a new symbolic token, Tilde, to the lexer.  This token will
|     be used to facilitate the parsing of infix function applications; it
|     does not consume the function identifier itself since infix applications
|     can be fully qualified.  This change causes a slight inconsistency: the
|     operators ~mod, ~rem, and ~in will now only have their overridden
|     precedences when used in an unqualified context.  Whether this is a
|     feature (i.e. this is how symbolic operators already work) or a
|     potential source of defects remains to be seen.
| 
|  aux/hudson-vim/syntax/hudson.vim | 58 +++++++++++++++++++++++---------------
|  src/syntax/lexer.ml              |  1 +
|  src/syntax/token.ml              |  1 +
|  test/test_lexer.ml               |  5 ++++
|  4 files changed, 43 insertions(+), 22 deletions(-)
| 
* commit e3a981f4bb36ffc17bbbb9f332ae140aae9696c9
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 23 22:05:11 2022 -0500
| 
|     [syntax] Add keywords discard, repeat
|     
|     Added the following keywords to the language definition:
|     
|     - discard :: Similar to the OCaml function (ignore _ : unit), which
|                  evaluates a function for its side-effects but discards the
|                  result.  In Hudson, this is a keyword so that it can have a
|                  higher precedence than a standard function invocation,
|                  similar to assert.  I've also renamed it from "ignore",
|                  since I think that "discard" is a more accurate description
|                  of the operation that it performs.
|     - repeat :: Used to head postcondition loops of the following form:
|         > repeat
|         >   body_statement ;
|         >   body_statement
|         > ( while | until ) condition
|     
|     These keywords are already supported by the Vim syntax highlighting
|     extension, as I realised their necessity while writing test code samples
|     therefor.
| 
|  src/syntax/lexer.ml | 2 ++
|  src/syntax/token.ml | 2 ++
|  test/test_lexer.ml  | 2 ++
|  3 files changed, 6 insertions(+)
| 
* commit 55149f8b5a1f1432a20bced221edac9e2b3556d3
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 23 22:00:32 2022 -0500
| 
|     [aux, vim] Implement syntax highlighting for complex statements
|     
|     Added syntax highlighting definitions for statements that take blocks of
|     code or require sequences of keywords.  The definitions are inspired by
|     those used for Lua and Ruby in the default Vim distribution: as such,
|     all keywords that comprise a structure will be highlighted in the same
|     colour, allowing for missing "end"s to be discovered visually.
| 
|  aux/hudson-vim/syntax/hudson.vim | 149 ++++++++++++++++++++++++++++++++++++-
|  1 file changed, 145 insertions(+), 4 deletions(-)
| 
* commit d0d98fa2e2aae6d0d10abfaa786c05a64d99bf11
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 22 23:03:20 2022 -0500
| 
|     [aux, vim] Improve string escape highlighting; add identifiers
|     
|     Fixed the highlighting of doubled delimiters in percent-escaped strings
|     by adding an escape rule for each delimiter.  Also added highlighting
|     for identifier-like tokens.  Pardon the 734-character-long regex.
| 
|  aux/hudson-vim/syntax/hudson.vim | 56 ++++++++++++++++++++++++++++++++++----
|  1 file changed, 51 insertions(+), 5 deletions(-)
| 
* commit 00ffcc62f85cda29307488e192140b7c312dfbc8
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 22 04:53:56 2022 -0500
| 
|     [aux, vim] Vim syntax highlighting for literals
|     
|     Added syntax highlighting for all literals, including support for
|     "parsing" string escape sequences and paired delimiters.  This may be a
|     bit of a stress test for Vim's syntax highlighting engine, although I
|     haven't noticed any perceptible slowness on my machine.
| 
|  aux/hudson-vim/ftdetect/hudson.vim |   6 ++
|  aux/hudson-vim/syntax/hudson.vim   | 151 +++++++++++++++++++++++++++++++++++
|  2 files changed, 157 insertions(+)
| 
* commit b9cdd0fb22eac46de8f848e55a62ce68e235650c
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Apr 21 22:56:09 2022 -0500
| 
|     [syntax] Implement association of trivia with terminals
|     
|     Introduced a new type, Token.terminal, to represent a token along with
|     its location and leading and trailing trivia.  This type will be
|     preserved in the CST and other representations for error reporting,
|     although pattern matching can be done on its .token field alone.  The
|     rules used for associating trivia with terminals are lifted directly
|     from Swift's lib/Syntax parser, which produces CSTs with excellent
|     fidelity and a simple API somewhat similar to Hudson's.
| 
|  src/syntax/cmd.ml     |   3 +-
|  src/syntax/lexer.ml   |  40 ++++++++--
|  src/syntax/lexer.mli  |   6 ++
|  src/syntax/lexgen.ml  |   9 +--
|  src/syntax/lexgen.mli |   5 ++
|  src/syntax/token.ml   |  62 ++++++++++-----
|  test/test_lexer.ml    | 199 ++++++++++++++++++++++++++++++++++--------------
|  7 files changed, 233 insertions(+), 91 deletions(-)
| 
* commit 204e3248153cc305f4e1e365553dc73980825ceb
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 20 19:01:11 2022 -0500
| 
|     [syntax] Promote Vcs_conflict to a token
|     
|     Since the parser will have more context about each VCS conflict as a
|     whole, Vcs_conflict is promoted to a token rather than being reported in
|     the lexer.  This change will make the process of parsing them simpler,
|     even allowing for portions of conflicts to be type-checked if desired;
|     furthermore, the parser will be able to report a single error for the
|     overall conflict rather than reporting each individual marker.
| 
|  src/prelude/reporting.ml      |  1 -
|  src/prelude/reporting_intf.ml |  3 +--
|  src/syntax/lexer.ml           | 34 ++++++----------------------------
|  src/syntax/token.ml           | 15 ++++++++-------
|  test/test_lexer.ml            | 10 +++++-----
|  5 files changed, 20 insertions(+), 43 deletions(-)
| 
* commit a5da5b6a8fefe651b6b10db4edda12dcfebbc2ac
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 20 18:37:45 2022 -0500
| 
|     [syntax] Add error reports for VCS conflicts
|     
|     Added error reporting for RCS/Subversion/Git-style VCS conflicts markers
|     detected by the lexer.  These markers are classified by the portion of
|     the conflict that they indicate so that the parser can skip over
|     conflicting regions to avoid throwing large numbers of spurious errors.
| 
|  src/prelude/reporting.ml      |  1 +
|  src/prelude/reporting_intf.ml |  3 ++-
|  src/syntax/lexer.ml           | 44 +++++++++++++++++++++++++++++++++++++++++
|  src/syntax/token.ml           |  8 +++++++-
|  test/test_lexer.ml            | 12 +++++++++++
|  5 files changed, 66 insertions(+), 2 deletions(-)
| 
* commit eefbaac21b45221811f8163f8ef8de4c8a72f6a6
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 20 17:11:45 2022 -0500
| 
|     [syntax] Added spread operator; alphabetised keywords
|     
|     Replaced the cons operator (:) with JavaScript-style spread (...)
|     semantics.  This will allow for more flexible pattern matching, such as
|     [a; b; ...; c; d], and will provide an isomorphic syntax for record
|     extension.
| 
|  src/syntax/lexer.ml | 42 ++++++++++++++++++++++--------------------
|  src/syntax/token.ml | 42 ++++++++++++++++++++++--------------------
|  test/test_lexer.ml  | 44 +++++++++++++++++++++++---------------------
|  3 files changed, 67 insertions(+), 61 deletions(-)
| 
* commit 774529d6d8f562902c11941b1626ff4216a58a4b
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 20 16:40:05 2022 -0500
| 
|     [syntax] Add named function arguments
|     
|     Implemented lexing of named function arguments.  These arguments may
|     take any of the following forms:
|     
|       - Standard named arguments.  These arguments take the form of a label
|         beginning with a colon followed by the variable bound to the
|         labelled argument.  Example: some_fn :name arg1 arg2
|       - Punned named arguments.  These arguments allow for the argument
|         value itself to be elided when it is a variable of the same name as
|         the label.  Example: some_fn :name name ==> some_fn :^name
|       - Flag arguments.  These arguments are a shorthand for named arguments
|         of type Bool, allowing the boolean value itself to be elided when it
|         would otherwise have been a literal.  Examples:
|           - some_fn :name True  ==> some_fn :+name
|           - some_fn :name False ==> some_fn :-name
| 
|  src/syntax/lexer.ml | 39 +++++++++++++++++++++++++++++++--------
|  src/syntax/token.ml |  3 +++
|  test/test_lexer.ml  | 23 +++++++++++++++++++++++
|  3 files changed, 57 insertions(+), 8 deletions(-)
| 
* commit b5dcb5eefd120ae3e70c6d79b5895425a11db4f6
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 20 03:09:17 2022 -0500
| 
|     [syntax] Added a substantial number of keywords
|     
|     Added a significant number of new symbolic and alphabetical keywords to
|     the lexer following some syntax sketches.  This is almost definitely not
|     the final version of the lexical syntax, although it's a great starting
|     point from which syntax highlighting and a preliminary parser can be
|     implemented.
| 
|  src/syntax/lexer.ml |  76 +++++++++++++++++++++++++++++++++++--
|  src/syntax/token.ml |  52 +++++++++++++++++++++++++-
|  test/test_lexer.ml  | 101 +++++++++++++++++++++++++++++++++++++++++++++-----
|  3 files changed, 214 insertions(+), 15 deletions(-)
| 
* commit dc3fa2e366e5e15fad3c7b08ac05ee191562222c
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 18 21:55:04 2022 -0500
| 
|     [misc] Remove syntax_demo.hsn
|     
|     Now that we have a proper test suite, there is really no need for this
|     file.  Eventually, full programs will return to this repository in the
|     form of integration tests and the standard library; however, for now,
|     the unit test suite is sufficient.
| 
|  syntax_demo.hsn | 70 -------------------------------------------------------
|  1 file changed, 70 deletions(-)
| 
* commit 67099c57b6bfa933e2bd38c13125b091dcdb3a3c
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 16 06:50:16 2022 -0500
| 
|     [syntax] Implemented extensible operators
|     
|     Implemented the extensible operators, whose precedences are determined
|     by their first characters.  The symbolic operators are intended to
|     support all mathematical infix operators that users could want to write
|     in their programs, although their syntax may require some additional
|     refinement due to Unicode's fairly course-grained classification of
|     mathematical symbols.
| 
|  src/prelude/prelude.ml |   4 ++
|  src/syntax/lexer.ml    | 144 +++++++++++++++++++++++++++++++++++++----------
|  src/syntax/token.ml    |  10 ++++
|  test/test_lexer.ml     |  67 +++++++++++++++++++++-
|  4 files changed, 195 insertions(+), 30 deletions(-)
| 
* commit ca1ee8e918906febd83998a988dd4dbed43974ff
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 16 05:58:50 2022 -0500
| 
|     [syntax] Correct Lexgen rule precedence
|     
|     Previously, Lexgen only considered the case that a state had at most one
|     fallback Accept action; however, it is possible for rules with
|     conflicting patterns to yield multiple actions for the same string.  In
|     this case, we now attempt to execute all of these actions until one
|     succeeds, prioritising those that were listed earlier in the
|     specification passed to Lexgen.make.
| 
|  src/syntax/lexgen.ml | 41 +++++++++++++++++++++--------------------
|  1 file changed, 21 insertions(+), 20 deletions(-)
| 
* commit 1d4c9185ebe7c553149eae5019f7a989751d44b2
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 11 04:25:32 2022 -0500
| 
|     [syntax] Simplify autogen/bidi_brackets parsing
|     
|     This is my weekly reminder that OCaml allows pattern-matching on
|     strings, which has allowed me to remove a Seq.filter_map call in this
|     script's parser.
| 
|  src/autogen/bidi_brackets.ml | 19 ++++++-------------
|  1 file changed, 6 insertions(+), 13 deletions(-)
| 
* commit 64cb6b8494292768da501dfac7ca969185bd61c5
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 11 04:17:38 2022 -0500
| 
|     [syntax] Change left_paired_delimiter to left_bracket
|     
|     Restricted the set of characters that are usable as the left delimiter
|     for percent strings to those with the property Bidi_Paired_Bracket
|     defined, rather than Bidi_Mirrored.  This eliminates a number of fairly
|     nonsensical pairs from the grammar, while still admitting most brackets
|     that anyone would consider to actually *be* brackets.  I have also added
|     three angled brackets to the set, since they are available on a wide
|     range of keyboards and I don't plan to use them anywhere else in the
|     grammar.
| 
|  src/autogen/bidi_brackets.ml       |  52 +++
|  src/autogen/bidi_mirroring.ml      |  44 ---
|  src/autogen/data/BidiBrackets.txt  | 193 +++++++++++
|  src/autogen/data/BidiMirroring.txt | 633 -----------------------------------
|  src/autogen/dune                   |   2 +-
|  src/syntax/dune                    |   6 +-
|  src/syntax/lexer.ml                |  17 +-
|  src/syntax/tables.ml               |   8 +-
|  src/syntax/tables.mli              |   8 +-
|  test/test_lexer.ml                 |   2 +-
|  10 files changed, 267 insertions(+), 698 deletions(-)
| 
* commit 5d010be9f49e3392b81406d4e1abc6b4018e2ee9
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 9 03:06:01 2022 -0500
| 
|     [syntax] Implemented numeric strings in lexer
|     
|     Added numeric string syntax, which is orthogonal with arbitrary-radix
|     integers and characters.  Unlike these other tokens, a radix prefix (or
|     '#' for hexadecimal) is always required to avoid conflicts with
|     unprefixed non-numeric string literals.  Furthermore, percent-prefixed
|     forms of these literals are not provided, as the string contents will
|     never contain the delimiter '"'.  I mostly envision these literals being
|     useful for encoding raw data: I anticipate that mode #b (hexadecimal
|     byte string) will be used most frequently, as it allows for hexdumps to
|     be embedded directly into source files.
| 
|  src/syntax/lexer.ml | 176 +++++++++++++++++++++++++++++++++++++++-----------
|  syntax_demo.hsn     |   3 +
|  test/test_lexer.ml  |  13 +++-
|  3 files changed, 153 insertions(+), 39 deletions(-)
| 
* commit 2e1290413efef301dac544a07179b538256aaeb0
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 8 19:02:30 2022 -0500
| 
|     [syntax] Disambiguate invalid byte and regular strings
|     
|     Added a new lexer error, `Invalid_byte_string, to differentiate byte
|     strings from regular strings (`Invalid_string_escape).  This will allow
|     the type checker to correctly perform inference regardless of the string
|     type, a task which previously required examining the token source.
| 
|  src/prelude/reporting.ml      | 6 ++++--
|  src/prelude/reporting_intf.ml | 1 +
|  src/syntax/lexer.ml           | 7 ++++---
|  src/syntax/token.ml           | 3 ++-
|  test/test_lexer.ml            | 8 ++++----
|  5 files changed, 15 insertions(+), 10 deletions(-)
| 
* commit 33480351f0eb9eb19685da1564527d8e52d9ee4a
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Apr 7 20:52:07 2022 -0500
| 
|     [meta] Add builds.sr.ht configuration
|     
|     Added a configuration to run the test suite and check formatting on
|     every push to git.sr.ht.  We're only testing on Arch Linux for now:
|     should support for additional platforms become necessary in the future,
|     e.g. for codegen on BSD, I'll add configurations for those as well.
| 
|  .builds/archlinux.yml | 39 +++++++++++++++++++++++++++++++++++++++
|  1 file changed, 39 insertions(+)
| 
* commit 45675905b20f452036fb9ef990dad722298dd735
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Apr 7 20:16:24 2022 -0500
| 
|     [test] Added lexer tests for {Byte,}String, Identifier
|     
|     Added tests for the remaining tokens currently recognised by the lexer.
|     I vastly prefer Hudson's alternate string syntax to OCaml's.
| 
|  test/test_lexer.ml | 86 +++++++++++++++++++++++++++++++++++++++++++++++++++-
|  1 file changed, 85 insertions(+), 1 deletion(-)
| 
* commit 431d98d712f3f3b01cc86d0d3fb6cbba78c0eec7
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 6 16:42:40 2022 -0500
| 
|     [test] Added tests for lexer, sans String-like tokens
|     
|     Added a test suite for the lexer, save for the tokens String,
|     ByteString, and Identifier.  The tests may be run with "dune test": at
|     the moment, all of them are expected to pass.
| 
|  dune-project        |   3 +-
|  src/syntax/dune     |   2 +-
|  src/syntax/token.ml |   4 +-
|  test/dune           |   6 +++
|  test/test.ml        |   4 ++
|  test/test_lexer.ml  | 133 ++++++++++++++++++++++++++++++++++++++++++++++++++
|  6 files changed, 148 insertions(+), 4 deletions(-)
| 
* commit e3de2b5deccda29b76ded8dbff947ec0f7e2ed8e
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 6 02:28:51 2022 -0500
| 
|     [syntax] Implemented byte strings in lexer
|     
|     Implemented the lexing of byte strings, which only allow single-byte
|     characters in their contents and will be encoded as a different type in
|     Hudson.  I've also refactored the string syntax definitions slightly,
|     removing the separate rules for raw strings to allow them to be combined
|     with byte strings.
| 
|  src/prelude/reporting.ml      |  5 ++-
|  src/prelude/reporting_intf.ml |  1 +
|  src/syntax/lexer.ml           | 92 ++++++++++++++++++++++++++---------------
|  src/syntax/token.ml           |  2 +
|  syntax_demo.hsn               |  4 ++
|  5 files changed, 69 insertions(+), 35 deletions(-)
| 
* commit ca979194304afbbd70df9ccfc062df9c78669379
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Apr 5 12:20:37 2022 -0500
| 
|     [syntax] Implemented raw strings in lexer
|     
|     Added raw strings to the lexer, which have a syntax similar to regular
|     strings with an 'r' inserted before the starting delimiter and ignore
|     all escape sequences within their contents.
| 
|  src/syntax/lexer.ml | 94 ++++++++++++++++++++++++++++++++-------------------
|  syntax_demo.hsn     |  2 ++
|  2 files changed, 62 insertions(+), 34 deletions(-)
| 
* commit 6b32961a2fb88b2e4cbecfc042be79a08e4f8cbb
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Apr 5 02:29:55 2022 -0500
| 
|     [syntax] Added reports for all lexer errors
|     
|     Added formatted reports for all of the remaining lexer errors; in the
|     process of formatting `Invalid_digit, I also discovered and fixed
|     another bug in the report formatting.
|     
|     Also, ich spreche kein Deutsch.
| 
|  src/prelude/reporting.ml      |  3 +-
|  src/prelude/reporting_intf.ml |  2 +-
|  src/syntax/lexer.ml           | 64 +++++++++++++++++++++++++++++++++++++----
|  src/syntax/token.ml           |  2 +-
|  syntax_demo.hsn               |  2 +-
|  5 files changed, 63 insertions(+), 10 deletions(-)
| 
* commit c837ff4527ddb90e774ef7f74f36ce66c192ba6a
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 4 04:03:30 2022 -0500
| 
|     [prelude] Parameterise context lines in Reporting
|     
|     Parameterised the number of lines of context to print in reports, in
|     anticipation of potentially making this value configurable in the
|     future.  At any rate, this modification also allowed me to discover a
|     bug in the file-rendering code that could result in a buffer overrun,
|     which is also fixed in this commit.
| 
|  src/prelude/reporting.ml | 18 +++++++++++++-----
|  1 file changed, 13 insertions(+), 5 deletions(-)
| 
* commit db5b6535fc9001fdb4d7285649a8cc1832797b63
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Apr 3 22:02:17 2022 -0500
| 
|     [prelude, syntax] Reporting infrastructure
|     
|     Added a new module, Prelude.Reporting, to handle the display of
|     formatted messages referencing spans of source code.  The format of
|     these messages is mostly derived from the Flow JavaScript typechecker,
|     which I consider to be substantially more readable than the famed ASCII
|     art messages output by rustc.  The rendering code is reasonably
|     complete, handling multiline source spans and overlapping spans.
|     
|     I've also begun to migrate some of the lexer errors to use Reporting,
|     although I haven't finished the translation yet.  It turns out that
|     writing helpful error messages is a) somewhat difficult, and b) quite
|     tedious.  The burdens we bear for our users :)
| 
|  src/autogen/bidi_mirroring.ml   |   6 +-
|  src/prelude/extensions.ml       |  13 ++
|  src/prelude/prelude.ml          |  17 +-
|  src/prelude/reporting.ml        | 329 ++++++++++++++++++++++++++++++++++++++
|  src/prelude/reporting.mli       |  23 +++
|  src/prelude/reporting_intf.ml   |  43 +++++
|  src/prelude/source_location.ml  |  20 +++
|  src/prelude/source_location.mli |  20 +++
|  src/prelude/util.ml             |  16 ++
|  src/syntax/lexer.ml             | 123 +++++++++-----
|  src/syntax/lexgen.ml            |  31 ++--
|  src/syntax/lexgen.mli           |   5 +
|  src/syntax/lexgen_intf.ml       |   4 +-
|  src/syntax/token.ml             |  10 +-
|  14 files changed, 587 insertions(+), 73 deletions(-)
| 
* commit 35b9dad40ed43235337ddd5816d4d890acdc1da5
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Mar 27 18:56:26 2022 -0500
| 
|     [syntax] Implemented percent-delimited string literals
|     
|     To allow for a wider range of strings to be written without escaping, an
|     alternate syntax of the form %(contents) is introduced, where the
|     parentheses may be substituted by any codepoint for which the property
|     Bidi_Mirrored is defined.  Refer to the changes to syntax_demo.hsn in
|     this commit for more examples of how these literals may be used.  I also
|     plan to make the syntax %ident(...) extensible in order to support
|     custom string transformations or custom literals, but exactly what form
|     this mechanism will take is still somewhat uncertain.
| 
|  dune-project                       |   1 +
|  src/autogen/autogen.ml             |  29 ++
|  src/autogen/bidi_mirroring.ml      |  44 +++
|  src/autogen/data/BidiMirroring.txt | 633 +++++++++++++++++++++++++++++++++++
|  src/autogen/dune                   |   6 +
|  src/prelude/dune                   |   1 +
|  src/syntax/dune                    |   8 +
|  src/syntax/lexer.ml                |  95 ++++--
|  src/syntax/tables.ml               |  11 +
|  src/syntax/tables.mli              |   5 +
|  syntax_demo.hsn                    |   7 +-
|  11 files changed, 802 insertions(+), 38 deletions(-)
| 
* commit fcfcef1816a864e230971f5ccc986f109345001a
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Mar 25 14:58:41 2022 -0500
| 
|     [syntax] Allow multi-codepoint entities in strings
|     
|     Multi-codepoint named characters are now permitted in string literals,
|     since there is no practical reason to restrict entities to only a single
|     codepoint in that context.  Accordingly, I've also added a new named
|     entity '&CRLF' so that developers can target Windows-style newlines
|     without having to write two extra characters ('&CR &LF').
| 
|  src/syntax/lexer.ml  | 55 +++++++++++++++++++++-----------------
|  src/syntax/tables.ml | 71 +++++++++++++++++++++++++-------------------------
|  src/syntax/token.ml  |  2 +-
|  syntax_demo.hsn      |  2 +-
|  4 files changed, 69 insertions(+), 61 deletions(-)
| 
* commit 0e658ad4b14bded30539dde051730644ade2b431
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Mar 24 17:19:15 2022 -0500
| 
|     [syntax] Implemented string literal lexing
|     
|     To the great surprise of everyone, especially me, dynamic lexer DFA
|     compilation has now become an actually useful feature.  String literals
|     defer to their own lexers constructed dynamically depending upon the
|     desired terminator character, allowing for supremely quick string lexing
|     courtesy of a slightly cursed internal state machine with very little
|     state.  Dynamic lexer generation also allows for string escape sequences
|     to reuse the same patterns and actions used for character literals by
|     the top-level lexer, enabling a ridiculous amount of code reuse that I
|     don't believe would be possible in any way otherwise.
| 
|  src/prelude/extensions.ml |   6 ++
|  src/syntax/lexer.ml       | 193 +++++++++++++++++++++++++++++++++++---------
|  src/syntax/token.ml       |   5 +-
|  syntax_demo.hsn           |  13 +++
|  4 files changed, 176 insertions(+), 41 deletions(-)
| 
* commit 5bc40329cbfa914c9b3d9d72ed810d509d0c5c36
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Mar 24 04:51:25 2022 -0500
| 
|     [syntax] Highlight "hudson tokenise" errors in red
|     
|     This is both a user- and development-oriented feature: trying to quickly
|     scan a list of sexps for errors is pretty tedious.
| 
|  src/syntax/cmd.ml   | 5 +++++
|  src/syntax/lexer.ml | 4 ++--
|  2 files changed, 7 insertions(+), 2 deletions(-)
| 
* commit 0f073ee4361c987d1ecf70a762973378e270054a
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Mar 24 04:03:55 2022 -0500
| 
|     [syntax] Character literals; identifier refinements
|     
|     Refined the grammar for identifiers to allow apostrophes in any
|     non-leading position and question marks at the end of identifiers to
|     denote predicates.
|     
|     Also implemented the lexing of character literals in all their manifold
|     forms: conceptually, these literals are rather simple, although they
|     require some fairly substantial data tables.  OCaml does not support the
|     generation of compile-time hash tables or tries, so hash tables of
|     character names are constructed at startup.
| 
|  src/prelude/extensions.ml |    3 +-
|  src/syntax/lexer.ml       |  142 ++-
|  src/syntax/tables.ml      | 2202 +++++++++++++++++++++++++++++++++++++++++++
|  src/syntax/tables.mli     |   15 +
|  src/syntax/token.ml       |   10 +-
|  syntax_demo.hsn           |   15 +
|  6 files changed, 2362 insertions(+), 25 deletions(-)
| 
* commit 0826c867352ea0415daefd198d6086f35a52d45b
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Mar 23 04:34:21 2022 -0500
| 
|     [syntax] Optimise byte ranges in Lexgen
|     
|     With only the current highly incomplete grammar, previous versions of
|     Lexgen generated a follower table containing 21_048 terminals, causing
|     perceptible (~0.15s) latency at startup.  As most of these terminals
|     were the enumerated constituents of byte ranges, I made these ranges
|     terminals in their own right, reducing the follower table to 913
|     terminals and substantially reducing the startup latency to ~0.03s.
| 
|  dune                 | 10 ++++++++++
|  src/syntax/lexgen.ml | 30 +++++++++++++++++-------------
|  2 files changed, 27 insertions(+), 13 deletions(-)
| 
* commit c4c652e978455738f5b5cb357c609ba674ae0cb2
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Mar 23 03:51:57 2022 -0500
| 
|     [syntax] Implemented identifier lexing
|     
|     Implemented the lexing of identifiers using a syntax (supported
|     character set) derived from Swift, allowing most linguistic and symbolic
|     Unicode codepoints to be used in Hudson identifiers while being a bit
|     more reasonable than C++.  Identifiers are NFC-normalised and will be
|     checked for confusables while the symbol table is being constructed.
| 
|  src/prelude/extensions.ml |  2 +-
|  src/syntax/lexer.ml       | 54 +++++++++++++++++++++++++++++++++++++++++----
|  src/syntax/lexgen.ml      | 10 +++++++++
|  src/syntax/lexgen_intf.ml |  2 ++
|  src/syntax/token.ml       |  2 ++
|  syntax_demo.hsn           | 10 +++++++++
|  6 files changed, 75 insertions(+), 5 deletions(-)
| 
* commit 15dd28328a0d0bd6a8dac11db80607d08fe8b78a
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Mar 22 20:30:15 2022 -0500
| 
|     [syntax] Remove redundant Integer token information; add Decimal token
|     
|     Removed fields (base, literal_value) from Integer tokens that can be
|     easily derived from the source span yielded from the lexer.  Also added
|     a Decimal token representing an arbitrary-precision rational value
|     written in decimal (int.fracE+exp) format: thanks to Zarith for
|     providing a parsing routine that already supports this format.  At the
|     moment, I'm not planning to include hexadecimal floating-point literals
|     since I honestly don't see any particular use for them; equivalent
|     behaviour can be achieved by transmuting an integer to a float anyway.
| 
|  src/prelude/extensions.ml |  7 +++++++
|  src/syntax/lexer.ml       | 40 +++++++++++++++++++++++++---------------
|  src/syntax/token.ml       |  3 ++-
|  syntax_demo.hsn           |  6 ++++++
|  4 files changed, 40 insertions(+), 16 deletions(-)
| 
* commit 61e47481a1179ed39f2c1a6a5eda1ccb95738c27
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Mar 22 02:06:42 2022 -0500
| 
|     [syntax] Implemented integer literal lexing
|     
|     Implemented the lexing of integer literals.  This infrastructure will be
|     reused for a number of other numeric and numeric-adjacent literals, so
|     the fairly large diff is of no particular cause for concern.  I've also
|     added a syntax demo file for use in showing off the language to others
|     before the parser is written: eventually similar files will be relocated
|     to a dedicated repository (or maybe just a directory) of code samples.
| 
|  dune-project              |   5 +-
|  src/prelude/dune          |  12 +++-
|  src/prelude/extensions.ml |  36 ++++++++++-
|  src/syntax/cmd.ml         |  11 ++--
|  src/syntax/lexer.ml       | 144 +++++++++++++++++++++++++++++++++++---------
|  src/syntax/lexgen.ml      |   3 +
|  src/syntax/lexgen_intf.ml |   1 +
|  src/syntax/token.ml       |  15 ++++-
|  syntax_demo.hsn           |  12 ++++
|  9 files changed, 202 insertions(+), 37 deletions(-)
| 
* commit 6a8b1505abdb7eefc31b1e6eae94d76391adde51
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Mar 21 09:20:31 2022 -0500
| 
|     [syntax] Lexer trivia patterns; token infrastructure
|     
|     In order to implement the "tokenise" command, I've implemented the
|     lexing of trivia and all of the necessary infrastructure to output a
|     token list.  The lexer generator is working remarkably well for how
|     ad-hoc it is, requiring only some small bug fixes for edge cases.
| 
|  dune-project              |  3 ++-
|  src/syntax/cmd.ml         | 13 ++++++++++
|  src/syntax/dune           |  2 +-
|  src/syntax/lexer.ml       | 62 +++++++++++++++++++++++++++++++++++++++++++++
|  src/syntax/lexer.mli      | 12 +++++++++
|  src/syntax/lexgen.ml      | 32 +++++++++++++++--------
|  src/syntax/lexgen.mli     | 17 +++++++------
|  src/syntax/lexgen_intf.ml |  2 ++
|  src/syntax/token.ml       | 23 +++++++++++++++++
|  9 files changed, 145 insertions(+), 21 deletions(-)
| 
* commit 53a5d1ae7d514077b659a4ea1436618022301847
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Mar 21 04:33:38 2022 -0500
| 
|     [prelude, syntax] Command line parsing infrastructure
|     
|     Added infrastructure for the processing of command line arguments using
|     subcommands similar to cargo or opam (hudson command ...).  In general,
|     each top-level module will contain a submodule Cmd that contains its
|     subcommands as its only exports.
| 
|  dune-project                 |  5 ++++-
|  src/dune                     |  4 +++-
|  src/hudson.ml                | 44 +++++++++++++++++++++++++++++++++++++++++-
|  src/prelude/dune             |  2 +-
|  src/prelude/generic_args.ml  | 21 ++++++++++++++++++++
|  src/prelude/generic_args.mli | 13 +++++++++++++
|  src/prelude/prelude.ml       |  6 ++++++
|  src/syntax/cmd.ml            | 36 ++++++++++++++++++++++++++++++++++
|  src/syntax/cmd.mli           |  6 ++++++
|  src/syntax/dune              |  4 +++-
|  src/syntax/lexgen.ml         |  4 +++-
|  src/syntax/lexgen_intf.ml    |  6 +++---
|  12 files changed, 142 insertions(+), 9 deletions(-)
| 
* commit 5a5085fd06c78629b69dced85c56f2f267a6b9d4
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Mar 20 22:51:27 2022 -0500
| 
|     [syntax] Implemented lexer scanning
|     
|     In other words, the lexer now actually lexes.  The interface is somewhat
|     similar to Sedlex, which itself is similar to the built-in OCaml Lexing
|     module; however, the additional provision of user-controlled
|     backtracking modifies the scanning algorithm somewhat.  Lexing may be
|     performed in either `Raw or `Utf8 mode, allowing for characters to be
|     counted in either source encoding regardless of the input format of the
|     automaton.
| 
|  src/syntax/lexgen.ml      | 118 ++++++++++++++++++++++++++++++++++++++++++--
|  src/syntax/lexgen.mli     |  34 +++++++++++++
|  src/syntax/lexgen_intf.ml |  30 ++++++++++-
|  3 files changed, 175 insertions(+), 7 deletions(-)
| 
* commit c3bd82c799bcdaab16ae96e65832369c0a4c1405
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Mar 20 01:37:46 2022 -0500
| 
|     [syntax] Implemented lexer DFA generation, minimisation
|     
|     Implemented the second portion of the regex -> DFA compilation
|     algorithm, which converts a table of follower terminals into a tabular
|     DFA.  The DFA is, roughly, an abstract machine consisting of three
|     instructions (states): Match, which consumes a single character; Accept,
|     which executes an action following the lexing of an entire token; and
|     Reject, which indicates an error terminates lexing.  The generated DFA
|     is guaranteed to be minimal and contain no duplicate states.
| 
|  src/syntax/lexgen.ml | 147 +++++++++++++++++++++++++++++++++++++------------
|  1 file changed, 113 insertions(+), 34 deletions(-)
| 
* commit d1309842234853e36d8bd5bee19683d013538005
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Mar 15 00:22:08 2022 -0500
| 
|     [syntax] Generate ByteRange patterns spanning UTF-8 lengths
|     
|     ByteRange will now result in patterns that properly span multiple UTF-8
|     byte lengths and properly generates patterns on length boundaries.
|     Currently, surrogate codepoint elimination is not supported, nor do I
|     plan to add support for it.
| 
|  src/syntax/lexgen.ml | 82 ++++++++++++++++++++++++++++++++------------------
|  1 file changed, 53 insertions(+), 29 deletions(-)
| 
* commit 16a8e121f51b98c44bea8fb5544d685e55c1c86c
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Mar 11 06:30:35 2022 -0600
| 
|     [syntax] Implemented ByteRange, Range Lexgen patterns
|     
|     Implemented lexer generator patterns for ranges of bytes and Unicode
|     codepoints.  Bytes were no issue whatsoever, but codepoint ranges were
|     quite horrifying to implement.  Existing implementations of codepoint
|     range automaton generation either a) constructed a full DFA, which is
|     severely overkill given that *we are about to build one anyway*; or b)
|     were horrifically inelegant or relied heavily upon imperative
|     programming constructs.  To my knowledge, this is the only functional
|     implementation of this algorithm to date, although I offer my sincere
|     condolences to anyone who was charged with this task regardless of their
|     chosen paradigm.
| 
|  src/prelude/extensions.ml |  29 +++++++++++
|  src/prelude/prelude.ml    |  16 +++++-
|  src/syntax/lexgen.ml      | 119 ++++++++++++++++++++++++++++++++++++++++++--
|  src/syntax/lexgen_intf.ml |   2 +
|  4 files changed, 162 insertions(+), 4 deletions(-)
| 
* commit 22980dc69baeea1a24ee264b0a70a0464d93d8e1
  Author: awsmith <aws@awsmith.us>
  Date:   Tue Mar 8 06:10:38 2022 -0600
  
      [prelude, syntax] Follower construction for lexgen
      
      Implemented the construction of follower tables (Φ) in the lexer
      generator, roughly following the algorithm defined in Aho–Sethi–Ullman
      to construct a lexer DFA directly from a regular expression without an
      intermediary NFA.
      
      Also, this is the first commit in this repository, standard new-project
      boilerplate included.  Welcome Hudson to the world!
  
   .editorconfig             |  12 ++++
   .gitattributes            |   2 +
   .gitignore                |   2 +
   .ocamlformat              |   6 ++
   LICENSE                   | 165 ++++++++++++++++++++++++++++++++++++++++++++
   dune-project              |  17 +++++
   src/dune                  |   6 ++
   src/hudson.ml             |   4 ++
   src/prelude/dune          |   6 ++
   src/prelude/prelude.ml    |  10 +++
   src/syntax/dune           |   6 ++
   src/syntax/lexgen.ml      | 121 ++++++++++++++++++++++++++++++++
   src/syntax/lexgen.mli     |  15 ++++
   src/syntax/lexgen_intf.ml |  23 ++++++
   14 files changed, 395 insertions(+)
