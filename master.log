* commit b5dcb5eefd120ae3e70c6d79b5895425a11db4f6
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 20 03:09:17 2022 -0500
| 
|     [syntax] Added a substantial number of keywords
|     
|     Added a significant number of new symbolic and alphabetical keywords to
|     the lexer following some syntax sketches.  This is almost definitely not
|     the final version of the lexical syntax, although it's a great starting
|     point from which syntax highlighting and a preliminary parser can be
|     implemented.
| 
|  src/syntax/lexer.ml |  76 +++++++++++++++++++++++++++++++++++--
|  src/syntax/token.ml |  52 +++++++++++++++++++++++++-
|  test/test_lexer.ml  | 101 +++++++++++++++++++++++++++++++++++++++++++++-----
|  3 files changed, 214 insertions(+), 15 deletions(-)
| 
* commit dc3fa2e366e5e15fad3c7b08ac05ee191562222c
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 18 21:55:04 2022 -0500
| 
|     [misc] Remove syntax_demo.hsn
|     
|     Now that we have a proper test suite, there is really no need for this
|     file.  Eventually, full programs will return to this repository in the
|     form of integration tests and the standard library; however, for now,
|     the unit test suite is sufficient.
| 
|  syntax_demo.hsn | 70 -------------------------------------------------------
|  1 file changed, 70 deletions(-)
| 
* commit 67099c57b6bfa933e2bd38c13125b091dcdb3a3c
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 16 06:50:16 2022 -0500
| 
|     [syntax] Implemented extensible operators
|     
|     Implemented the extensible operators, whose precedences are determined
|     by their first characters.  The symbolic operators are intended to
|     support all mathematical infix operators that users could want to write
|     in their programs, although their syntax may require some additional
|     refinement due to Unicode's fairly course-grained classification of
|     mathematical symbols.
| 
|  src/prelude/prelude.ml |   4 ++
|  src/syntax/lexer.ml    | 144 +++++++++++++++++++++++++++++++++++++----------
|  src/syntax/token.ml    |  10 ++++
|  test/test_lexer.ml     |  67 +++++++++++++++++++++-
|  4 files changed, 195 insertions(+), 30 deletions(-)
| 
* commit ca1ee8e918906febd83998a988dd4dbed43974ff
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 16 05:58:50 2022 -0500
| 
|     [syntax] Correct Lexgen rule precedence
|     
|     Previously, Lexgen only considered the case that a state had at most one
|     fallback Accept action; however, it is possible for rules with
|     conflicting patterns to yield multiple actions for the same string.  In
|     this case, we now attempt to execute all of these actions until one
|     succeeds, prioritising those that were listed earlier in the
|     specification passed to Lexgen.make.
| 
|  src/syntax/lexgen.ml | 41 +++++++++++++++++++++--------------------
|  1 file changed, 21 insertions(+), 20 deletions(-)
| 
* commit 1d4c9185ebe7c553149eae5019f7a989751d44b2
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 11 04:25:32 2022 -0500
| 
|     [syntax] Simplify autogen/bidi_brackets parsing
|     
|     This is my weekly reminder that OCaml allows pattern-matching on
|     strings, which has allowed me to remove a Seq.filter_map call in this
|     script's parser.
| 
|  src/autogen/bidi_brackets.ml | 19 ++++++-------------
|  1 file changed, 6 insertions(+), 13 deletions(-)
| 
* commit 64cb6b8494292768da501dfac7ca969185bd61c5
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 11 04:17:38 2022 -0500
| 
|     [syntax] Change left_paired_delimiter to left_bracket
|     
|     Restricted the set of characters that are usable as the left delimiter
|     for percent strings to those with the property Bidi_Paired_Bracket
|     defined, rather than Bidi_Mirrored.  This eliminates a number of fairly
|     nonsensical pairs from the grammar, while still admitting most brackets
|     that anyone would consider to actually *be* brackets.  I have also added
|     three angled brackets to the set, since they are available on a wide
|     range of keyboards and I don't plan to use them anywhere else in the
|     grammar.
| 
|  src/autogen/bidi_brackets.ml       |  52 +++
|  src/autogen/bidi_mirroring.ml      |  44 ---
|  src/autogen/data/BidiBrackets.txt  | 193 +++++++++++
|  src/autogen/data/BidiMirroring.txt | 633 -----------------------------------
|  src/autogen/dune                   |   2 +-
|  src/syntax/dune                    |   6 +-
|  src/syntax/lexer.ml                |  17 +-
|  src/syntax/tables.ml               |   8 +-
|  src/syntax/tables.mli              |   8 +-
|  test/test_lexer.ml                 |   2 +-
|  10 files changed, 267 insertions(+), 698 deletions(-)
| 
* commit 5d010be9f49e3392b81406d4e1abc6b4018e2ee9
| Author: awsmith <aws@awsmith.us>
| Date:   Sat Apr 9 03:06:01 2022 -0500
| 
|     [syntax] Implemented numeric strings in lexer
|     
|     Added numeric string syntax, which is orthogonal with arbitrary-radix
|     integers and characters.  Unlike these other tokens, a radix prefix (or
|     '#' for hexadecimal) is always required to avoid conflicts with
|     unprefixed non-numeric string literals.  Furthermore, percent-prefixed
|     forms of these literals are not provided, as the string contents will
|     never contain the delimiter '"'.  I mostly envision these literals being
|     useful for encoding raw data: I anticipate that mode #b (hexadecimal
|     byte string) will be used most frequently, as it allows for hexdumps to
|     be embedded directly into source files.
| 
|  src/syntax/lexer.ml | 176 +++++++++++++++++++++++++++++++++++++++-----------
|  syntax_demo.hsn     |   3 +
|  test/test_lexer.ml  |  13 +++-
|  3 files changed, 153 insertions(+), 39 deletions(-)
| 
* commit 2e1290413efef301dac544a07179b538256aaeb0
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Apr 8 19:02:30 2022 -0500
| 
|     [syntax] Disambiguate invalid byte and regular strings
|     
|     Added a new lexer error, `Invalid_byte_string, to differentiate byte
|     strings from regular strings (`Invalid_string_escape).  This will allow
|     the type checker to correctly perform inference regardless of the string
|     type, a task which previously required examining the token source.
| 
|  src/prelude/reporting.ml      | 6 ++++--
|  src/prelude/reporting_intf.ml | 1 +
|  src/syntax/lexer.ml           | 7 ++++---
|  src/syntax/token.ml           | 3 ++-
|  test/test_lexer.ml            | 8 ++++----
|  5 files changed, 15 insertions(+), 10 deletions(-)
| 
* commit 33480351f0eb9eb19685da1564527d8e52d9ee4a
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Apr 7 20:52:07 2022 -0500
| 
|     [meta] Add builds.sr.ht configuration
|     
|     Added a configuration to run the test suite and check formatting on
|     every push to git.sr.ht.  We're only testing on Arch Linux for now:
|     should support for additional platforms become necessary in the future,
|     e.g. for codegen on BSD, I'll add configurations for those as well.
| 
|  .builds/archlinux.yml | 39 +++++++++++++++++++++++++++++++++++++++
|  1 file changed, 39 insertions(+)
| 
* commit 45675905b20f452036fb9ef990dad722298dd735
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Apr 7 20:16:24 2022 -0500
| 
|     [test] Added lexer tests for {Byte,}String, Identifier
|     
|     Added tests for the remaining tokens currently recognised by the lexer.
|     I vastly prefer Hudson's alternate string syntax to OCaml's.
| 
|  test/test_lexer.ml | 86 +++++++++++++++++++++++++++++++++++++++++++++++++++-
|  1 file changed, 85 insertions(+), 1 deletion(-)
| 
* commit 431d98d712f3f3b01cc86d0d3fb6cbba78c0eec7
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 6 16:42:40 2022 -0500
| 
|     [test] Added tests for lexer, sans String-like tokens
|     
|     Added a test suite for the lexer, save for the tokens String,
|     ByteString, and Identifier.  The tests may be run with "dune test": at
|     the moment, all of them are expected to pass.
| 
|  dune-project        |   3 +-
|  src/syntax/dune     |   2 +-
|  src/syntax/token.ml |   4 +-
|  test/dune           |   6 +++
|  test/test.ml        |   4 ++
|  test/test_lexer.ml  | 133 ++++++++++++++++++++++++++++++++++++++++++++++++++
|  6 files changed, 148 insertions(+), 4 deletions(-)
| 
* commit e3de2b5deccda29b76ded8dbff947ec0f7e2ed8e
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Apr 6 02:28:51 2022 -0500
| 
|     [syntax] Implemented byte strings in lexer
|     
|     Implemented the lexing of byte strings, which only allow single-byte
|     characters in their contents and will be encoded as a different type in
|     Hudson.  I've also refactored the string syntax definitions slightly,
|     removing the separate rules for raw strings to allow them to be combined
|     with byte strings.
| 
|  src/prelude/reporting.ml      |  5 ++-
|  src/prelude/reporting_intf.ml |  1 +
|  src/syntax/lexer.ml           | 92 ++++++++++++++++++++++++++---------------
|  src/syntax/token.ml           |  2 +
|  syntax_demo.hsn               |  4 ++
|  5 files changed, 69 insertions(+), 35 deletions(-)
| 
* commit ca979194304afbbd70df9ccfc062df9c78669379
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Apr 5 12:20:37 2022 -0500
| 
|     [syntax] Implemented raw strings in lexer
|     
|     Added raw strings to the lexer, which have a syntax similar to regular
|     strings with an 'r' inserted before the starting delimiter and ignore
|     all escape sequences within their contents.
| 
|  src/syntax/lexer.ml | 94 ++++++++++++++++++++++++++++++++-------------------
|  syntax_demo.hsn     |  2 ++
|  2 files changed, 62 insertions(+), 34 deletions(-)
| 
* commit 6b32961a2fb88b2e4cbecfc042be79a08e4f8cbb
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Apr 5 02:29:55 2022 -0500
| 
|     [syntax] Added reports for all lexer errors
|     
|     Added formatted reports for all of the remaining lexer errors; in the
|     process of formatting `Invalid_digit, I also discovered and fixed
|     another bug in the report formatting.
|     
|     Also, ich spreche kein Deutsch.
| 
|  src/prelude/reporting.ml      |  3 +-
|  src/prelude/reporting_intf.ml |  2 +-
|  src/syntax/lexer.ml           | 64 +++++++++++++++++++++++++++++++++++++----
|  src/syntax/token.ml           |  2 +-
|  syntax_demo.hsn               |  2 +-
|  5 files changed, 63 insertions(+), 10 deletions(-)
| 
* commit c837ff4527ddb90e774ef7f74f36ce66c192ba6a
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Apr 4 04:03:30 2022 -0500
| 
|     [prelude] Parameterise context lines in Reporting
|     
|     Parameterised the number of lines of context to print in reports, in
|     anticipation of potentially making this value configurable in the
|     future.  At any rate, this modification also allowed me to discover a
|     bug in the file-rendering code that could result in a buffer overrun,
|     which is also fixed in this commit.
| 
|  src/prelude/reporting.ml | 18 +++++++++++++-----
|  1 file changed, 13 insertions(+), 5 deletions(-)
| 
* commit db5b6535fc9001fdb4d7285649a8cc1832797b63
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Apr 3 22:02:17 2022 -0500
| 
|     [prelude, syntax] Reporting infrastructure
|     
|     Added a new module, Prelude.Reporting, to handle the display of
|     formatted messages referencing spans of source code.  The format of
|     these messages is mostly derived from the Flow JavaScript typechecker,
|     which I consider to be substantially more readable than the famed ASCII
|     art messages output by rustc.  The rendering code is reasonably
|     complete, handling multiline source spans and overlapping spans.
|     
|     I've also begun to migrate some of the lexer errors to use Reporting,
|     although I haven't finished the translation yet.  It turns out that
|     writing helpful error messages is a) somewhat difficult, and b) quite
|     tedious.  The burdens we bear for our users :)
| 
|  src/autogen/bidi_mirroring.ml   |   6 +-
|  src/prelude/extensions.ml       |  13 ++
|  src/prelude/prelude.ml          |  17 +-
|  src/prelude/reporting.ml        | 329 ++++++++++++++++++++++++++++++++++++++
|  src/prelude/reporting.mli       |  23 +++
|  src/prelude/reporting_intf.ml   |  43 +++++
|  src/prelude/source_location.ml  |  20 +++
|  src/prelude/source_location.mli |  20 +++
|  src/prelude/util.ml             |  16 ++
|  src/syntax/lexer.ml             | 123 +++++++++-----
|  src/syntax/lexgen.ml            |  31 ++--
|  src/syntax/lexgen.mli           |   5 +
|  src/syntax/lexgen_intf.ml       |   4 +-
|  src/syntax/token.ml             |  10 +-
|  14 files changed, 587 insertions(+), 73 deletions(-)
| 
* commit 35b9dad40ed43235337ddd5816d4d890acdc1da5
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Mar 27 18:56:26 2022 -0500
| 
|     [syntax] Implemented percent-delimited string literals
|     
|     To allow for a wider range of strings to be written without escaping, an
|     alternate syntax of the form %(contents) is introduced, where the
|     parentheses may be substituted by any codepoint for which the property
|     Bidi_Mirrored is defined.  Refer to the changes to syntax_demo.hsn in
|     this commit for more examples of how these literals may be used.  I also
|     plan to make the syntax %ident(...) extensible in order to support
|     custom string transformations or custom literals, but exactly what form
|     this mechanism will take is still somewhat uncertain.
| 
|  dune-project                       |   1 +
|  src/autogen/autogen.ml             |  29 ++
|  src/autogen/bidi_mirroring.ml      |  44 +++
|  src/autogen/data/BidiMirroring.txt | 633 +++++++++++++++++++++++++++++++++++
|  src/autogen/dune                   |   6 +
|  src/prelude/dune                   |   1 +
|  src/syntax/dune                    |   8 +
|  src/syntax/lexer.ml                |  95 ++++--
|  src/syntax/tables.ml               |  11 +
|  src/syntax/tables.mli              |   5 +
|  syntax_demo.hsn                    |   7 +-
|  11 files changed, 802 insertions(+), 38 deletions(-)
| 
* commit fcfcef1816a864e230971f5ccc986f109345001a
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Mar 25 14:58:41 2022 -0500
| 
|     [syntax] Allow multi-codepoint entities in strings
|     
|     Multi-codepoint named characters are now permitted in string literals,
|     since there is no practical reason to restrict entities to only a single
|     codepoint in that context.  Accordingly, I've also added a new named
|     entity '&CRLF' so that developers can target Windows-style newlines
|     without having to write two extra characters ('&CR &LF').
| 
|  src/syntax/lexer.ml  | 55 +++++++++++++++++++++-----------------
|  src/syntax/tables.ml | 71 +++++++++++++++++++++++++-------------------------
|  src/syntax/token.ml  |  2 +-
|  syntax_demo.hsn      |  2 +-
|  4 files changed, 69 insertions(+), 61 deletions(-)
| 
* commit 0e658ad4b14bded30539dde051730644ade2b431
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Mar 24 17:19:15 2022 -0500
| 
|     [syntax] Implemented string literal lexing
|     
|     To the great surprise of everyone, especially me, dynamic lexer DFA
|     compilation has now become an actually useful feature.  String literals
|     defer to their own lexers constructed dynamically depending upon the
|     desired terminator character, allowing for supremely quick string lexing
|     courtesy of a slightly cursed internal state machine with very little
|     state.  Dynamic lexer generation also allows for string escape sequences
|     to reuse the same patterns and actions used for character literals by
|     the top-level lexer, enabling a ridiculous amount of code reuse that I
|     don't believe would be possible in any way otherwise.
| 
|  src/prelude/extensions.ml |   6 ++
|  src/syntax/lexer.ml       | 193 +++++++++++++++++++++++++++++++++++---------
|  src/syntax/token.ml       |   5 +-
|  syntax_demo.hsn           |  13 +++
|  4 files changed, 176 insertions(+), 41 deletions(-)
| 
* commit 5bc40329cbfa914c9b3d9d72ed810d509d0c5c36
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Mar 24 04:51:25 2022 -0500
| 
|     [syntax] Highlight "hudson tokenise" errors in red
|     
|     This is both a user- and development-oriented feature: trying to quickly
|     scan a list of sexps for errors is pretty tedious.
| 
|  src/syntax/cmd.ml   | 5 +++++
|  src/syntax/lexer.ml | 4 ++--
|  2 files changed, 7 insertions(+), 2 deletions(-)
| 
* commit 0f073ee4361c987d1ecf70a762973378e270054a
| Author: awsmith <aws@awsmith.us>
| Date:   Thu Mar 24 04:03:55 2022 -0500
| 
|     [syntax] Character literals; identifier refinements
|     
|     Refined the grammar for identifiers to allow apostrophes in any
|     non-leading position and question marks at the end of identifiers to
|     denote predicates.
|     
|     Also implemented the lexing of character literals in all their manifold
|     forms: conceptually, these literals are rather simple, although they
|     require some fairly substantial data tables.  OCaml does not support the
|     generation of compile-time hash tables or tries, so hash tables of
|     character names are constructed at startup.
| 
|  src/prelude/extensions.ml |    3 +-
|  src/syntax/lexer.ml       |  142 ++-
|  src/syntax/tables.ml      | 2202 +++++++++++++++++++++++++++++++++++++++++++
|  src/syntax/tables.mli     |   15 +
|  src/syntax/token.ml       |   10 +-
|  syntax_demo.hsn           |   15 +
|  6 files changed, 2362 insertions(+), 25 deletions(-)
| 
* commit 0826c867352ea0415daefd198d6086f35a52d45b
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Mar 23 04:34:21 2022 -0500
| 
|     [syntax] Optimise byte ranges in Lexgen
|     
|     With only the current highly incomplete grammar, previous versions of
|     Lexgen generated a follower table containing 21_048 terminals, causing
|     perceptible (~0.15s) latency at startup.  As most of these terminals
|     were the enumerated constituents of byte ranges, I made these ranges
|     terminals in their own right, reducing the follower table to 913
|     terminals and substantially reducing the startup latency to ~0.03s.
| 
|  dune                 | 10 ++++++++++
|  src/syntax/lexgen.ml | 30 +++++++++++++++++-------------
|  2 files changed, 27 insertions(+), 13 deletions(-)
| 
* commit c4c652e978455738f5b5cb357c609ba674ae0cb2
| Author: awsmith <aws@awsmith.us>
| Date:   Wed Mar 23 03:51:57 2022 -0500
| 
|     [syntax] Implemented identifier lexing
|     
|     Implemented the lexing of identifiers using a syntax (supported
|     character set) derived from Swift, allowing most linguistic and symbolic
|     Unicode codepoints to be used in Hudson identifiers while being a bit
|     more reasonable than C++.  Identifiers are NFC-normalised and will be
|     checked for confusables while the symbol table is being constructed.
| 
|  src/prelude/extensions.ml |  2 +-
|  src/syntax/lexer.ml       | 54 +++++++++++++++++++++++++++++++++++++++++----
|  src/syntax/lexgen.ml      | 10 +++++++++
|  src/syntax/lexgen_intf.ml |  2 ++
|  src/syntax/token.ml       |  2 ++
|  syntax_demo.hsn           | 10 +++++++++
|  6 files changed, 75 insertions(+), 5 deletions(-)
| 
* commit 15dd28328a0d0bd6a8dac11db80607d08fe8b78a
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Mar 22 20:30:15 2022 -0500
| 
|     [syntax] Remove redundant Integer token information; add Decimal token
|     
|     Removed fields (base, literal_value) from Integer tokens that can be
|     easily derived from the source span yielded from the lexer.  Also added
|     a Decimal token representing an arbitrary-precision rational value
|     written in decimal (int.fracE+exp) format: thanks to Zarith for
|     providing a parsing routine that already supports this format.  At the
|     moment, I'm not planning to include hexadecimal floating-point literals
|     since I honestly don't see any particular use for them; equivalent
|     behaviour can be achieved by transmuting an integer to a float anyway.
| 
|  src/prelude/extensions.ml |  7 +++++++
|  src/syntax/lexer.ml       | 40 +++++++++++++++++++++++++---------------
|  src/syntax/token.ml       |  3 ++-
|  syntax_demo.hsn           |  6 ++++++
|  4 files changed, 40 insertions(+), 16 deletions(-)
| 
* commit 61e47481a1179ed39f2c1a6a5eda1ccb95738c27
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Mar 22 02:06:42 2022 -0500
| 
|     [syntax] Implemented integer literal lexing
|     
|     Implemented the lexing of integer literals.  This infrastructure will be
|     reused for a number of other numeric and numeric-adjacent literals, so
|     the fairly large diff is of no particular cause for concern.  I've also
|     added a syntax demo file for use in showing off the language to others
|     before the parser is written: eventually similar files will be relocated
|     to a dedicated repository (or maybe just a directory) of code samples.
| 
|  dune-project              |   5 +-
|  src/prelude/dune          |  12 +++-
|  src/prelude/extensions.ml |  36 ++++++++++-
|  src/syntax/cmd.ml         |  11 ++--
|  src/syntax/lexer.ml       | 144 +++++++++++++++++++++++++++++++++++---------
|  src/syntax/lexgen.ml      |   3 +
|  src/syntax/lexgen_intf.ml |   1 +
|  src/syntax/token.ml       |  15 ++++-
|  syntax_demo.hsn           |  12 ++++
|  9 files changed, 202 insertions(+), 37 deletions(-)
| 
* commit 6a8b1505abdb7eefc31b1e6eae94d76391adde51
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Mar 21 09:20:31 2022 -0500
| 
|     [syntax] Lexer trivia patterns; token infrastructure
|     
|     In order to implement the "tokenise" command, I've implemented the
|     lexing of trivia and all of the necessary infrastructure to output a
|     token list.  The lexer generator is working remarkably well for how
|     ad-hoc it is, requiring only some small bug fixes for edge cases.
| 
|  dune-project              |  3 ++-
|  src/syntax/cmd.ml         | 13 ++++++++++
|  src/syntax/dune           |  2 +-
|  src/syntax/lexer.ml       | 62 +++++++++++++++++++++++++++++++++++++++++++++
|  src/syntax/lexer.mli      | 12 +++++++++
|  src/syntax/lexgen.ml      | 32 +++++++++++++++--------
|  src/syntax/lexgen.mli     | 17 +++++++------
|  src/syntax/lexgen_intf.ml |  2 ++
|  src/syntax/token.ml       | 23 +++++++++++++++++
|  9 files changed, 145 insertions(+), 21 deletions(-)
| 
* commit 53a5d1ae7d514077b659a4ea1436618022301847
| Author: awsmith <aws@awsmith.us>
| Date:   Mon Mar 21 04:33:38 2022 -0500
| 
|     [prelude, syntax] Command line parsing infrastructure
|     
|     Added infrastructure for the processing of command line arguments using
|     subcommands similar to cargo or opam (hudson command ...).  In general,
|     each top-level module will contain a submodule Cmd that contains its
|     subcommands as its only exports.
| 
|  dune-project                 |  5 ++++-
|  src/dune                     |  4 +++-
|  src/hudson.ml                | 44 +++++++++++++++++++++++++++++++++++++++++-
|  src/prelude/dune             |  2 +-
|  src/prelude/generic_args.ml  | 21 ++++++++++++++++++++
|  src/prelude/generic_args.mli | 13 +++++++++++++
|  src/prelude/prelude.ml       |  6 ++++++
|  src/syntax/cmd.ml            | 36 ++++++++++++++++++++++++++++++++++
|  src/syntax/cmd.mli           |  6 ++++++
|  src/syntax/dune              |  4 +++-
|  src/syntax/lexgen.ml         |  4 +++-
|  src/syntax/lexgen_intf.ml    |  6 +++---
|  12 files changed, 142 insertions(+), 9 deletions(-)
| 
* commit 5a5085fd06c78629b69dced85c56f2f267a6b9d4
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Mar 20 22:51:27 2022 -0500
| 
|     [syntax] Implemented lexer scanning
|     
|     In other words, the lexer now actually lexes.  The interface is somewhat
|     similar to Sedlex, which itself is similar to the built-in OCaml Lexing
|     module; however, the additional provision of user-controlled
|     backtracking modifies the scanning algorithm somewhat.  Lexing may be
|     performed in either `Raw or `Utf8 mode, allowing for characters to be
|     counted in either source encoding regardless of the input format of the
|     automaton.
| 
|  src/syntax/lexgen.ml      | 118 ++++++++++++++++++++++++++++++++++++++++++--
|  src/syntax/lexgen.mli     |  34 +++++++++++++
|  src/syntax/lexgen_intf.ml |  30 ++++++++++-
|  3 files changed, 175 insertions(+), 7 deletions(-)
| 
* commit c3bd82c799bcdaab16ae96e65832369c0a4c1405
| Author: awsmith <aws@awsmith.us>
| Date:   Sun Mar 20 01:37:46 2022 -0500
| 
|     [syntax] Implemented lexer DFA generation, minimisation
|     
|     Implemented the second portion of the regex -> DFA compilation
|     algorithm, which converts a table of follower terminals into a tabular
|     DFA.  The DFA is, roughly, an abstract machine consisting of three
|     instructions (states): Match, which consumes a single character; Accept,
|     which executes an action following the lexing of an entire token; and
|     Reject, which indicates an error terminates lexing.  The generated DFA
|     is guaranteed to be minimal and contain no duplicate states.
| 
|  src/syntax/lexgen.ml | 147 +++++++++++++++++++++++++++++++++++++------------
|  1 file changed, 113 insertions(+), 34 deletions(-)
| 
* commit d1309842234853e36d8bd5bee19683d013538005
| Author: awsmith <aws@awsmith.us>
| Date:   Tue Mar 15 00:22:08 2022 -0500
| 
|     [syntax] Generate ByteRange patterns spanning UTF-8 lengths
|     
|     ByteRange will now result in patterns that properly span multiple UTF-8
|     byte lengths and properly generates patterns on length boundaries.
|     Currently, surrogate codepoint elimination is not supported, nor do I
|     plan to add support for it.
| 
|  src/syntax/lexgen.ml | 82 ++++++++++++++++++++++++++++++++------------------
|  1 file changed, 53 insertions(+), 29 deletions(-)
| 
* commit 16a8e121f51b98c44bea8fb5544d685e55c1c86c
| Author: awsmith <aws@awsmith.us>
| Date:   Fri Mar 11 06:30:35 2022 -0600
| 
|     [syntax] Implemented ByteRange, Range Lexgen patterns
|     
|     Implemented lexer generator patterns for ranges of bytes and Unicode
|     codepoints.  Bytes were no issue whatsoever, but codepoint ranges were
|     quite horrifying to implement.  Existing implementations of codepoint
|     range automaton generation either a) constructed a full DFA, which is
|     severely overkill given that *we are about to build one anyway*; or b)
|     were horrifically inelegant or relied heavily upon imperative
|     programming constructs.  To my knowledge, this is the only functional
|     implementation of this algorithm to date, although I offer my sincere
|     condolences to anyone who was charged with this task regardless of their
|     chosen paradigm.
| 
|  src/prelude/extensions.ml |  29 +++++++++++
|  src/prelude/prelude.ml    |  16 +++++-
|  src/syntax/lexgen.ml      | 119 ++++++++++++++++++++++++++++++++++++++++++--
|  src/syntax/lexgen_intf.ml |   2 +
|  4 files changed, 162 insertions(+), 4 deletions(-)
| 
* commit 22980dc69baeea1a24ee264b0a70a0464d93d8e1
  Author: awsmith <aws@awsmith.us>
  Date:   Tue Mar 8 06:10:38 2022 -0600
  
      [prelude, syntax] Follower construction for lexgen
      
      Implemented the construction of follower tables (Φ) in the lexer
      generator, roughly following the algorithm defined in Aho–Sethi–Ullman
      to construct a lexer DFA directly from a regular expression without an
      intermediary NFA.
      
      Also, this is the first commit in this repository, standard new-project
      boilerplate included.  Welcome Hudson to the world!
  
   .editorconfig             |  12 ++++
   .gitattributes            |   2 +
   .gitignore                |   2 +
   .ocamlformat              |   6 ++
   LICENSE                   | 165 ++++++++++++++++++++++++++++++++++++++++++++
   dune-project              |  17 +++++
   src/dune                  |   6 ++
   src/hudson.ml             |   4 ++
   src/prelude/dune          |   6 ++
   src/prelude/prelude.ml    |  10 +++
   src/syntax/dune           |   6 ++
   src/syntax/lexgen.ml      | 121 ++++++++++++++++++++++++++++++++
   src/syntax/lexgen.mli     |  15 ++++
   src/syntax/lexgen_intf.ml |  23 ++++++
   14 files changed, 395 insertions(+)
